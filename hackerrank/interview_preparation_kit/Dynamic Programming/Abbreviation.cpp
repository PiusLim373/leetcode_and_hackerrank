#include <bits/stdc++.h>

using namespace std;

string abbreviation(string a, string b) {
    string a_up = a;
    transform(a_up.begin(), a_up.end(), a_up.begin(), ::toupper);
    map<char, int> a_m, b_m, a_up_m;
    for(int i = 0; i < a.size(); i++) a_up_m[a_up[i]]++;
    // for(int i = 0; i < a.size(); i++) a_m[a[i]]++;
    for(int i = 0; i < b.size(); i++) b_m[b[i]]++;
    for(auto x: b_m) {
        //check if b has alphabet a dont have
        if (a_up_m.count(x.first) == 0) return "NO";
    }
    int a_counter = a.size()-1;
    int b_counter = b.size()-1;
    while(a_counter>=0){
        if(b_counter>=0){
            if(b[b_counter] != a[a_counter]){
                if(!islower(a[a_counter])) return "NO";
                else if(toupper(a[a_counter]) == b[b_counter]) {
                    b_counter--;
                    a_counter--;
                }
                else a_counter--; 
            }
            else {
                b_counter--;
                a_counter--;
            }
        }
        else{
            if (islower(a[a_counter])) a_counter--; 
            else return "NO";
        }
       
    }
    return "YES";
}

string abbreviationError(string a, string b) {
    string a_up = a;
    transform(a_up.begin(), a_up.end(), a_up.begin(), ::toupper);
    map<char, int> a_m, b_m, a_up_m;
    for(int i = 0; i < a.size(); i++) a_up_m[a_up[i]]++;
    for(int i = 0; i < a.size(); i++) a_m[a[i]]++;
    for(int i = 0; i < b.size(); i++) b_m[b[i]]++;
    for(auto x: b_m) {
        //check if b has alphabet a dont have
        if (a_up_m.count(x.first) == 0) return "NO";
    }
    for(auto x: a_m) {
        
        if(b_m[x.first] > x.second) return "NO";
        else if (b_m[x.first] < x.second){
            if(!islower(x.first)) return "NO";
        }

    }
    return "YES";
}

int main(){
    string a = "Bb";
    string b = "B";
    string result = abbreviation(a, b);
    cout << endl << result; 
    return 0;
}

// Useful test cases that was generated by my test driver which helped me pass all the test cases:

// ababbaAbAB AABABB false

// aAbAb ABAB true

// baaBa BAAA false

// abAAb AAA true

// babaABbbAb ABAA false